buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id "idea"
    id "maven-publish"
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.diffplug.spotless' version '7.0.2'
    id 'org.spongepowered.mixin' version '0.7+'
}

def generatedResources = file("src/generated")

sourceSets {
    main {
        resources.srcDir generatedResources
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'GTCEu Maven'
        url = 'https://maven.gtceu.com'
        content {
            includeGroup 'com.gregtechceu.gtceu'
        }
    }
    maven {
        name 'FirstDarkDev'
        url "https://maven.firstdarkdev.xyz/snapshots/"
    }
    maven {
        // LatvianDev Maven (KubeJS and Rhino)
        url = "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven { // Registrate
        url = "https://maven.tterrag.com/"
        content {
            // need to be specific here due to version overlaps
            includeGroup("com.tterrag.registrate")
        }
    }
    maven {
        // Patchouli, JEI
        name = "BlameJared"
        url = "https://maven.blamejared.com/"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        // Curse Forge File
        url "https://cursemaven.com/"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // EMI
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}

    maven {
        url = "https://maven.architectury.dev"
    }
    maven {
        url = "https://thedarkcolour.github.io/KotlinForForge/"
    }

}

version = mod_version
group = maven_group
base { archivesName = archives_base_name }
java { sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17 }
sourceSets.main.resources { srcDir 'src/generated/resources' }

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods { "${mod_id}" { source sourceSets.main } }
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
        }
        client { property 'forge.enabledGameTestNamespaces', mod_id }
        server { property 'forge.enabledGameTestNamespaces', mod_id; args '--nogui' }
        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', 'gtceu'


        }
    }
}


apply plugin: 'org.spongepowered.mixin'
apply from: "$rootDir/gradle/scripts/spotless.gradle"

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Mixin
    annotationProcessor "org.spongepowered:mixin:0.8.7:processor"

    // JEI, EMI, Jade
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    runtimeOnly fg.deobf("dev.emi:emi-forge:${emi_version}+${minecraft_version}")
    runtimeOnly fg.deobf("curse.maven:jade-324717:5390389")

    // GregTech and dependencies
    implementation fg.deobf("com.gregtechceu.gtceu:gtceu-${minecraft_version}:${gtceu_version}:slim") { transitive = false }
    implementation fg.deobf("com.lowdragmc.ldlib:ldlib-forge-${minecraft_version}:${ldlib_version}") { transitive = false }
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")
    runtimeOnly fg.deobf("dev.toma.configuration:configuration-forge-${minecraft_version}:${configuration_version}")
    runtimeOnly fg.deobf("dev.architectury:architectury-forge:${architectury_version}")

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

tasks.named('processResources', ProcessResources).configure {
    var properties = [
            "mod_license": mod_license,
            "mod_id": mod_id,
            "version": version,
            "mod_name": mod_name,
            "mod_url": mod_url,
            "mod_author": mod_author,
            "forge_version": forge_version.split("\\.")[0], // only specify major version of forge
            "minecraft_version": minecraft_version,
            "gtceu_version": gtceu_version,
    ]
    inputs.properties(properties)

    filesMatching("META-INF/mods.toml") {
        expand properties + [project: project]
    }
}

tasks.named('jar', Jar).configure { finalizedBy 'reobfJar' }
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    options.encoding = "UTF-8"
    options.release.set(17)
}

